services:
  db:
    image: postgres:14-alpine
    container_name: odjassa_db
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: odjassauser
      POSTGRES_PASSWORD: odjassapassword
      POSTGRES_DB: odjassanet_dev
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./database/migrations:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U odjassauser -d odjassanet_dev"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    container_name: odjassa_backend
    ports:
      - "4000:4000"
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgres://odjassauser:odjassapassword@db:5432/odjassanet_dev
      JWT_SECRET: yourSuperSecretKeyForDevelopmentOnly # Change this!
      CORS_ORIGIN: http://localhost:3000 # Default for dev, adjust if frontend runs on different port like 3001
      # EMAIL_HOST etc. if you want to configure a real SMTP server
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    # command: npm run dev # Uncomment if you want to use nodemon and it's in dependencies

  frontend-prod-build: # Renamed for clarity: tests the production Nginx build
    build:
      context: .
      dockerfile: docker/Dockerfile.frontend
      args:
        # If Nginx proxies to backend service name: REACT_APP_API_URL: /api/v1
        # If Nginx proxies to backend exposed on host: REACT_APP_API_URL: http://host.docker.internal:4000/api/v1 (for Docker Desktop)
        # Or for direct call from browser to backend on host:
        REACT_APP_API_URL: http://localhost:4000/api/v1 
    container_name: odjassa_frontend_prod_build
    ports:
      - "3001:80" # Changed host port to 3001 to avoid conflict with potential frontend-dev on 3000
    depends_on:
      - backend
    restart: unless-stopped
    # Volumes are generally not mounted for a production build test like this,
    # as it serves static files built into the image.

  # frontend-dev: # Example for local frontend development with hot-reloading
  #   # This service would typically use a Node image and run `npm start`
  #   # It would mount the frontend source code directly.
  #   # Example:
  #   # image: node:18-alpine
  #   # container_name: odjassa_frontend_dev
  #   # working_dir: /app/frontend
  #   # command: npm start
  #   # volumes:
  #   #   - ./frontend:/app/frontend
  #   # ports:
  #   #   - "3000:3000" # React dev server typically runs on 3000
  #   # environment:
  #   #   - NODE_ENV=development
  #   #   - CHOKIDAR_USEPOLLING=true # For hot-reloading in Docker
  #   #   - WDS_SOCKET_PORT=0 # For CRA 5+ if using Webpack Dev Server
  #   #   - REACT_APP_API_URL=http://localhost:4000/api/v1 # Or http://backend:4000/api/v1
  #   # depends_on:
  #   #   - backend

volumes:
  postgres_data:
    driver: local

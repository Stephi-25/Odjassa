# Placeholder Dockerfile for Frontend (React)
# This would typically be a multi-stage build

# Stage 1: Build the React application
FROM node:18-alpine AS builder
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock)
COPY frontend/package.json frontend/package-lock.json* ./
# If you have a frontend/ dir in the context, adjust path:
# COPY package.json package-lock.json* ./

# Install dependencies
# Make sure to use the .dockerignore to exclude node_modules from host
RUN npm install --legacy-peer-deps

# Copy the rest of the application code
# COPY frontend/ ./
COPY . .

# Set the API URL (example, can be passed as build arg)
ARG REACT_APP_API_URL=/api/v1
ENV REACT_APP_API_URL=${REACT_APP_API_URL}

# Build the application
RUN npm run build --prefix frontend

# Stage 2: Serve the static files using Nginx
FROM nginx:stable-alpine
WORKDIR /usr/share/nginx/html

# Remove default Nginx static assets
RUN rm -rf ./*

# Copy static assets from builder stage
COPY --from=builder /app/frontend/build .

# Expose port 80
EXPOSE 80

# Default command to start Nginx
CMD ["nginx", "-g", "daemon off;"]

# You might need to add a custom nginx.conf to handle React Router
# For example, copy a nginx.conf:
# COPY nginx.conf /etc/nginx/conf.d/default.conf
#
# Example nginx.conf for React Router:
# server {
#   listen 80;
#   root /usr/share/nginx/html;
#   index index.html index.htm;
#
#   location / {
#     try_files $uri /index.html;
#   }
#
#   # Optional: proxy API requests if frontend and backend are on the same domain
#   # location /api/ {
#   #   proxy_pass http://backend_service_name:backend_port/api/;
#   #   proxy_set_header Host $host;
#   #   proxy_set_header X-Real-IP $remote_addr;
#   #   proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#   #   proxy_set_header X-Forwarded-Proto $scheme;
#   # }
# }
